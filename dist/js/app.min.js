/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst tg = window.Telegram.WebApp;\r\nlet closeApp = document.querySelector(\".close__app\");\r\ntg.ready((closeApp.style.display = \"block\"));\r\ntg.expand();\r\n//if (tg.ready()) {\r\n//  closeApp.style.display = \"block\";\r\n//}\r\ncloseApp.addEventListener(\"click\", (e) => {\r\n  tg.close();\r\n});\r\nlet hiBox = document.querySelector(\".hi__wrapper\");\r\nlet controlVisit = localStorage.getItem(\"data\");\r\nlet closeHi = document.querySelector(\".hi__close\");\r\n\r\nif (controlVisit === null) {\r\n  hiBox.style.display = \"block\";\r\n} else {\r\n  hiBox.style.display = \"none\";\r\n}\r\n\r\nlocalStorage.setItem(\"data\", 1);\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst box = document.querySelector(\".wrapper__touch\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nlet colorCurrent = \"#000000\";\r\nlet colorLast = \"#000000\";\r\nlet indexCanvas = 1;\r\nlet touchStart = null; //Точка начала касания\r\nlet touchPosition = null; //Текущая позиция\r\n\r\nInitApp(); //Инициализировать приложение\r\n\r\nbox.append(cloneCanvas(canvas));\r\n\r\nwindow.addEventListener(\"resize\", InitApp); //При растягивании окна приложение будет инициализироваться заново\r\n\r\nfunction InitApp() {\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n}\r\n// Установка цвета линии\r\nlet colorBox = document.querySelector(\".color__box\");\r\ncolorBox.addEventListener(\"change\", function (e) {\r\n  e.preventDefault();\r\n  let colorChoose = document.querySelector(\".color__choose\");\r\n  colorCurrent = colorChoose.value;\r\n  colorLast = colorChoose.value;\r\n});\r\n//Создание клонов при рисовании\r\nfunction cloneCanvas(oldCanvas) {\r\n  let newCanvas = document.createElement(\"canvas\");\r\n  let context = newCanvas.getContext(\"2d\");\r\n\r\n  newCanvas.width = oldCanvas.width;\r\n  newCanvas.height = oldCanvas.height;\r\n  context.drawImage(oldCanvas, 0, 0);\r\n  return newCanvas;\r\n}\r\nfunction cloneCanvasReturn(oldCanvas) {\r\n  let newCanvas = document.querySelector(\".canvas\");\r\n  let context = newCanvas.getContext(\"2d\");\r\n\r\n  newCanvas.width = oldCanvas.width;\r\n  newCanvas.height = oldCanvas.height;\r\n\r\n  context.drawImage(oldCanvas, 0, 0);\r\n  return newCanvas;\r\n}\r\n\r\n//Перехватываем события (мобильная версия)\r\nbox.addEventListener(\"touchstart\", function (e) {\r\n  if (\r\n    e.target.classList.contains(\"canvas\") ||\r\n    e.target.classList.contains(\"number__box\")\r\n  ) {\r\n    if (indexCanvas >= 1) {\r\n      let canvasArr = document.querySelectorAll(\"canvas\");\r\n      for (let i = indexCanvas + 1; i < canvasArr.length; i++) {\r\n        canvasArr[i].remove();\r\n      }\r\n    }\r\n    TouchStart(e);\r\n  }\r\n});\r\nbox.addEventListener(\"touchmove\", function (e) {\r\n  if (\r\n    e.target.classList.contains(\"canvas\") ||\r\n    e.target.classList.contains(\"number__box\")\r\n  ) {\r\n    TouchMove(e);\r\n  }\r\n});\r\nbox.addEventListener(\"touchend\", function (e) {\r\n  if (\r\n    e.target.classList.contains(\"canvas\") ||\r\n    e.target.classList.contains(\"number__box\")\r\n  ) {\r\n    TouchEnd(e);\r\n    box.append(cloneCanvas(canvas));\r\n  }\r\n});\r\n\r\n//Обработка рсиования на мобильной версии\r\nfunction TouchStart(e) {\r\n  //Получаем текущую позицию касания\r\n\r\n  touchStart = {\r\n    x: e.changedTouches[0].clientX,\r\n    y: e.changedTouches[0].clientY,\r\n  };\r\n  touchPosition = { x: touchStart.x, y: touchStart.y };\r\n  Draw(touchStart.x, touchStart.y, `${colorCurrent}`);\r\n  ctx.beginPath();\r\n  ctx.moveTo(touchStart.x, touchStart.y);\r\n}\r\nfunction TouchMove(e) {\r\n  //Получаем новую позицию\r\n  touchPosition = {\r\n    x: e.changedTouches[0].clientX,\r\n    y: e.changedTouches[0].clientY,\r\n  };\r\n  ctx.lineTo(touchPosition.x, touchPosition.y);\r\n  ctx.lineWidth = widthLine;\r\n  ctx.strokeStyle = colorCurrent;\r\n  ctx.lineCap = \"round\";\r\n  ctx.lineJoin = \"bevel\";\r\n  ctx.stroke();\r\n}\r\nfunction TouchEnd(e) {\r\n  indexCanvas++;\r\n  if (indexCanvas > 0) {\r\n    pictireBtnLeft.style.display = \"block\";\r\n  } else {\r\n    pictireBtnLeft.style.display = \"none\";\r\n  }\r\n\r\n  touchPosition = {\r\n    x: e.changedTouches[0].clientX,\r\n    y: e.changedTouches[0].clientY,\r\n  };\r\n}\r\n//Рисоавние начальной точки\r\nfunction Draw(x, y, color = `${colorCurrent}`) {\r\n  ctx.fillStyle = color;\r\n  ctx.strokeStyle = color;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, `${widthLine / 2}`, 0, Math.PI * 2);\r\n  ctx.fill();\r\n}\r\n\r\nlet mouse = { x: 0, y: 0 };\r\nlet draw = false;\r\n//Перехватываем события (десктопная версия)\r\ncanvas.addEventListener(\"mousedown\", function (e) {\r\n  if (e.button === 0) {\r\n    mouse.x = e.pageX - this.offsetLeft;\r\n    mouse.y = e.pageY - this.offsetTop;\r\n    draw = true;\r\n    Draw(mouse.x, mouse.y, `${colorCurrent}`);\r\n    ctx.beginPath();\r\n    ctx.moveTo(mouse.x, mouse.y);\r\n  }\r\n});\r\ncanvas.addEventListener(\"mousemove\", function (e) {\r\n  if (e.button === 0) {\r\n    if (draw == true) {\r\n      if (indexCanvas >= 1) {\r\n        let canvasArr = document.querySelectorAll(\"canvas\");\r\n        for (let i = indexCanvas + 1; i < canvasArr.length; i++) {\r\n          canvasArr[i].remove();\r\n        }\r\n      }\r\n      mouse.x = e.pageX - this.offsetLeft;\r\n      mouse.y = e.pageY - this.offsetTop;\r\n      ctx.lineTo(mouse.x, mouse.y);\r\n      ctx.lineWidth = widthLine;\r\n      ctx.strokeStyle = colorCurrent;\r\n      ctx.lineCap = \"round\";\r\n      ctx.lineJoin = \"bevel\";\r\n      ctx.stroke();\r\n    }\r\n  }\r\n});\r\ncanvas.addEventListener(\"mouseup\", function (e) {\r\n  if (e.button === 0) {\r\n    mouse.x = e.pageX - this.offsetLeft;\r\n    mouse.y = e.pageY - this.offsetTop;\r\n    ctx.lineTo(mouse.x, mouse.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    draw = false;\r\n    box.append(cloneCanvas(canvas));\r\n    indexCanvas++;\r\n    if (indexCanvas > 0) {\r\n      pictireBtnLeft.style.display = \"block\";\r\n    } else {\r\n      pictireBtnLeft.style.display = \"none\";\r\n    }\r\n  }\r\n});\r\n\r\nlet toolItem = document.querySelectorAll(\".tool__item\");\r\nlet btnAudio = document.querySelectorAll(\".btn__audio\");\r\nlet controlSound = 0;\r\nlet checkStatus;\r\nwindow.addEventListener(\"online\", updateStatus);\r\nwindow.addEventListener(\"offline\", updateStatus);\r\n\r\nfunction updateStatus() {\r\n  if (navigator.onLine) {\r\n    checkStatus = 1;\r\n  } else {\r\n    checkStatus = 0;\r\n  }\r\n}\r\nupdateStatus();\r\n//Прослушка кликов по экрану\r\nbox.addEventListener(\"click\", function (e) {\r\n  if (\r\n    e.target.classList.contains(\"hi__wrapper\") ||\r\n    e.target.classList.contains(\"hi__text\") ||\r\n    e.target.classList.contains(\"hi__name\")\r\n  ) {\r\n  } else {\r\n    hiBox.style.display = \"none\";\r\n  }\r\n\r\n  let numberBox = document.querySelector(\".number__box\");\r\n  let numberChoose = document.querySelector(\".number__choose\");\r\n  let closeNumberChoose = document.querySelector(\".number__choose-close\");\r\n  let widthBox = document.querySelector(\".range__wrapper\");\r\n  let closeWidthBox = document.querySelector(\".range__close\");\r\n  let btnPlay = document.querySelector(\".btn__play\");\r\n  let index = parseInt(e.target.dataset.number);\r\n  let menuWrapper = document.querySelector(\".menu__wrapper\");\r\n  let resetYesNo = document.querySelector(\".reset__confirmation\");\r\n  let menuBox = document.querySelector(\".menu__box\");\r\n  let payBox = document.querySelector(\".pay__box\");\r\n  let picture = document.querySelector(\".picture__wrapper\");\r\n  let pictureCurrent = document.getElementById(\"picCurrent\");\r\n  let picCurrent = document.querySelector(\".pic__current\");\r\n  let bannerImg = document.getElementById(\"imgCurrent\");\r\n  let imgCurrent = document.querySelector(\".img__current\");\r\n\r\n  function OnlineBoxNone() {\r\n    picture.style.display = \"none\";\r\n    numberBox.style.display = \"none\";\r\n  }\r\n\r\n  function NumberAllRemove() {\r\n    numberBox.style.display = \"none\";\r\n    numberChoose.style.display = \"none\";\r\n    btnPlay.classList.remove(\"active\");\r\n  }\r\n  function peroActive() {\r\n    toolItem[index].classList.remove(\"active\");\r\n    toolItem[1].classList.add(\"active\");\r\n  }\r\n  //Запуск звука\r\n  if (e.target.classList.contains(\"btn__audio\")) {\r\n    controlSound = parseInt(e.target.dataset.sound);\r\n\r\n    btnAudio.forEach((item) => item.classList.remove(\"active\"));\r\n    btnAudio[controlSound].classList.add(\"active\");\r\n  }\r\n  //Клики по главному меню\r\n  if (e.target.classList.contains(\"tool__click\")) {\r\n    toolItem.forEach((item) => item.classList.remove(\"active\"));\r\n    widthBox.style.display = \"none\";\r\n    e.target.classList.add(\"active\");\r\n    numberChoose.style.display = \"none\";\r\n\r\n    if (index === 0) {\r\n      colorCurrent = \"#ffffff\";\r\n    } else {\r\n      colorCurrent = colorLast;\r\n    }\r\n  }\r\n  //Установка толщины линии\r\n  if (e.target.classList.contains(\"width__box\")) {\r\n    widthBox.style.display = \"block\";\r\n    toolItem[index].classList.add(\"active\");\r\n    closeWidthBox.onclick = function () {\r\n      widthBox.style.display = \"none\";\r\n      peroActive();\r\n    };\r\n  }\r\n  //Очистка холста\r\n  if (e.target.classList.contains(\"reset__box\")) {\r\n    menuWrapper.style.display = \"flex\";\r\n    resetYesNo.style.display = \"block\";\r\n    menuWrapper.addEventListener(\"click\", function (e) {\r\n      if (e.target.classList.contains(\"yes\")) {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        pictireBtnRight.style.display = \"none\";\r\n        pictireBtnLeft.style.display = \"none\";\r\n        menuWrapper.style.display = \"none\";\r\n        resetYesNo.style.display = \"none\";\r\n        picture.style.display = \"none\";\r\n        picCurrent.style.display = \"none\";\r\n        imgCurrent.style.display = \"none\";\r\n        peroActive();\r\n        NumberAllRemove();\r\n        document.querySelector(\"#imgCurrent\").src = \"\";\r\n        if (indexCanvas > 1) {\r\n          let canvasArr = document.querySelectorAll(\"canvas\");\r\n          for (let i = 1; i < canvasArr.length; i++) {\r\n            canvasArr[i].remove();\r\n          }\r\n          box.append(cloneCanvas(canvas));\r\n          indexCanvas = 1;\r\n        }\r\n      }\r\n      if (e.target.classList.contains(\"no\")) {\r\n        menuWrapper.style.display = \"none\";\r\n        resetYesNo.style.display = \"none\";\r\n        peroActive();\r\n      }\r\n    });\r\n  }\r\n  //Выбор цифры\r\n  if (e.target.classList.contains(\"number__btn\")) {\r\n    numberChoose.style.display = \"grid\";\r\n    closeNumberChoose.onclick = function () {\r\n      numberChoose.style.display = \"none\";\r\n\r\n      peroActive();\r\n    };\r\n    function soundClick(src) {\r\n      var audio = new Audio(); // Создаём новый элемент Audio\r\n      audio.src = src; // Указываем путь к звуку \"клика\"\r\n      audio.autoplay = true; // Автоматически запускаем\r\n    }\r\n    numberChoose.addEventListener(\"click\", function (e) {\r\n      let index = e.target.dataset.point;\r\n      if (e.target.classList.contains(\"number__choose-item\")) {\r\n        updateStatus();\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        numberBox.style.display = \"flex\";\r\n        numberBox.innerText = \"\";\r\n        picture.style.display = \"none\";\r\n        if (checkStatus === 0) {\r\n          let dataImage = localStorage.getItem(`imgData${index}`);\r\n          imgCurrent.style.display = \"block\";\r\n          picCurrent.style.display = \"none\";\r\n          OnlineBoxNone();\r\n          bannerImg.innerText = \"\";\r\n          bannerImg.src = \"data:image/gif;base64,\" + dataImage;\r\n          btnPlay.classList.remove(\"active\");\r\n        } else {\r\n          numberBox.insertAdjacentHTML(\r\n            \"afterbegin\",\r\n            `<img src=\"img/number/number${index}.gif?rand${Math.random()}\" alt=\"number\" />`\r\n          );\r\n          btnPlay.classList.add(\"active\");\r\n          let src = `./files/audio/audio${index}.mp3`;\r\n          if (controlSound === 0) {\r\n            soundClick(src);\r\n          }\r\n          btnPlay.onclick = function () {\r\n            numberBox.innerText = \"\";\r\n            numberBox.insertAdjacentHTML(\r\n              \"afterbegin\",\r\n              `<img src=\"img/number/number${index}.gif?rand${Math.random()}\" alt=\"number\" />`\r\n            );\r\n            if (controlSound === 0) {\r\n              soundClick(src);\r\n            }\r\n          };\r\n        }\r\n\r\n        pictireBtnRight.style.display = \"none\";\r\n        pictireBtnLeft.style.display = \"none\";\r\n        if (indexCanvas > 1) {\r\n          let canvasArr = document.querySelectorAll(\"canvas\");\r\n          for (let i = 1; i < canvasArr.length; i++) {\r\n            canvasArr[i].remove();\r\n          }\r\n          box.append(cloneCanvas(canvas));\r\n          indexCanvas = 1;\r\n        }\r\n        numberChoose.style.display = \"none\";\r\n        peroActive();\r\n        colorCurrent = colorLast;\r\n      }\r\n      if (e.target.classList.contains(\"number__choose-delete\")) {\r\n        NumberAllRemove();\r\n        toolItem[1].classList.add(\"active\");\r\n        toolItem[4].classList.remove(\"active\");\r\n      }\r\n    });\r\n  }\r\n  //Вызов доп. меню\r\n  if (e.target.classList.contains(\"menu__btn\")) {\r\n    let manualBox = document.querySelector(\".info__box\");\r\n    let pictureBox = document.querySelector(\".picture__box\");\r\n    menuWrapper.style.display = \"flex\";\r\n    menuBox.style.display = \"flex\";\r\n    menuBox.addEventListener(\"click\", function (e) {\r\n      if (e.target.classList.contains(\"menu__close\")) {\r\n        menuWrapper.style.display = \"none\";\r\n        menuBox.style.display = \"none\";\r\n      }\r\n      if (e.target.classList.contains(\"manual\")) {\r\n        hiBox.style.display = \"none\";\r\n        manualBox.style.display = \"flex\";\r\n        document.querySelector(\".info__close\").onclick = function () {\r\n          manualBox.style.display = \"none\";\r\n        };\r\n      }\r\n      if (e.target.classList.contains(\"pay\")) {\r\n        payBox.style.display = \"flex\";\r\n        document.querySelector(\".pay__close\").onclick = function () {\r\n          payBox.style.display = \"none\";\r\n        };\r\n      }\r\n      if (e.target.classList.contains(\"choose__picture\")) {\r\n        pictureBox.style.display = \"grid\";\r\n        document.querySelector(\".picture__close\").onclick = function () {\r\n          pictureBox.style.display = \"none\";\r\n        };\r\n        pictureBox.addEventListener(\"click\", function (e) {\r\n          if (e.target.classList.contains(\"picture__click\")) {\r\n            let index = e.target.dataset.point;\r\n            let dataPicture = localStorage.getItem(`pictureData${index}`);\r\n            pictureBox.style.display = \"none\";\r\n            menuWrapper.style.display = \"none\";\r\n            menuBox.style.display = \"none\";\r\n            numberBox.style.display = \"none\";\r\n            document.querySelector(\"#imgCurrent\").src = \"\";\r\n            pictureCurrent.src = \"\";\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            pictireBtnRight.style.display = \"none\";\r\n            pictireBtnLeft.style.display = \"none\";\r\n            menuWrapper.style.display = \"none\";\r\n            if (checkStatus === 0) {\r\n              pictureCurrent.src = \"data:image/gif;base64,\" + dataPicture;\r\n              OnlineBoxNone();\r\n              picCurrent.style.display = \"block\";\r\n              imgCurrent.style.display = \"none\";\r\n            } else {\r\n              picture.style.display = \"flex\";\r\n              picture.innerText = \"\";\r\n              picture.insertAdjacentHTML(\r\n                \"afterbegin\",\r\n                `<img src=\"img/picture/pic${index}.jpg?rand${Math.random()}\" alt=\"животное\" />`\r\n              );\r\n            }\r\n\r\n            peroActive();\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n});\r\n//Работа с инпутом выбора толщины линии\r\nlet rangeTrack = document.querySelector(\".chekbox__track\");\r\nlet rangeInput = document.querySelector(\".range__input\");\r\nlet rangeInfo = document.querySelector(\".range__value-box\");\r\nlet rangeGap = rangeInput.step;\r\nlet rangeMax = rangeInput.max;\r\nlet rangeMin = rangeInput.min;\r\nlet rangeValue = rangeInput.value;\r\nlet percent;\r\nlet rangeWidthBegin = function () {\r\n  percent = ((rangeValue - rangeMin) / (rangeMax - rangeMin)) * 100;\r\n  rangeTrack.style.background = `linear-gradient(to right, #98c1d9 0%, #98c1d9 ${percent}%,  transparent ${percent}%, transparent 100%)`;\r\n  rangeInfo.style.left = `${percent}%`;\r\n  let currentValue = document.querySelector(\".range__value\");\r\n  let minValue = document.querySelector(\".range__number.begin\");\r\n  let maxValue = document.querySelector(\".range__number.end\");\r\n  currentValue.innerText = rangeInput.value;\r\n  minValue.innerText = rangeMin;\r\n  maxValue.innerText = rangeMax;\r\n  widthLine = rangeInput.value;\r\n  return widthLine;\r\n};\r\nlet widthLine;\r\nrangeWidthBegin();\r\nrangeInput.addEventListener(\"input\", function () {\r\n  let rangeTrack = document.querySelector(\".chekbox__track\");\r\n  let rangeInput = document.querySelector(\".range__input\");\r\n  let rangeInfo = document.querySelector(\".range__value-box\");\r\n  let rangeMax = rangeInput.max;\r\n  let rangeMin = rangeInput.min;\r\n  let rangeValue = rangeInput.value;\r\n  let percent;\r\n\r\n  percent = ((rangeValue - rangeMin) / (rangeMax - rangeMin)) * 100;\r\n  rangeTrack.style.background = `linear-gradient(to right, #98c1d9 0%,  #98c1d9 ${percent}%, transparent ${percent}%, transparent 100%)`;\r\n  rangeInfo.style.left = `${percent}%`;\r\n  let currentValue = document.querySelector(\".range__value\");\r\n  currentValue.innerText = rangeInput.value;\r\n  widthLine = rangeInput.value;\r\n\r\n  let end = document.querySelector(\".range__number.end\");\r\n  let begin = document.querySelector(\".range__number.begin\");\r\n  if (percent < 10) {\r\n    rangeInfo.style.transform = \"translateX(3px)\";\r\n  }\r\n  if (percent > 10) {\r\n    rangeInfo.style.transform = \"translateX(2px)\";\r\n  }\r\n  if (percent > 20) {\r\n    rangeInfo.style.transform = \"translateX(-1px)\";\r\n  }\r\n  if (percent > 30) {\r\n    rangeInfo.style.transform = \"translateX(-3px)\";\r\n  }\r\n  if (percent > 40) {\r\n    rangeInfo.style.transform = \"translateX(-7px)\";\r\n  }\r\n  if (percent > 50) {\r\n    rangeInfo.style.transform = \"translateX(-7px)\";\r\n  }\r\n  if (percent > 60) {\r\n    rangeInfo.style.transform = \"translateX(-10px)\";\r\n  }\r\n  if (percent > 80) {\r\n    rangeInfo.style.transform = \"translateX(-15px)\";\r\n  }\r\n  if (percent > 90) {\r\n    rangeInfo.style.transform = \"translateX(-17px)\";\r\n  }\r\n  if (percent < 5) {\r\n    begin.style.visibility = \"hidden\";\r\n  } else {\r\n    begin.style.visibility = \"visible\";\r\n  }\r\n  if (percent > 95) {\r\n    end.style.display = \"none\";\r\n  } else {\r\n    end.style.display = \"flex\";\r\n  }\r\n  return widthLine;\r\n});\r\n//Скриншот холста\r\nlet screenshotBtn = document.querySelector(\".screenshot__btn\");\r\nscreenshotBtn.addEventListener(\"click\", function () {\r\n  html2canvas(document.querySelector(\".canvas\")).then((canvas) => {\r\n    // Сохраняем содержимое холста как файл и скачиваем\r\n    canvas.toBlob(function (blob) {\r\n      saveAs(blob, \"hangge.png\");\r\n    });\r\n  });\r\n});\r\n\r\nfunction soundClick(src) {\r\n  var audio = new Audio(); // Создаём новый элемент Audio\r\n  audio.src = \"src\"; // Указываем путь к звуку \"клика\"\r\n  audio.autoplay = true; // Автоматически запускаем\r\n}\r\n\r\n//Работа с возратом клонов каждого прорисованного элемента\r\nlet pictireBtnLeft = document.querySelector(\".pictire__left\");\r\nlet pictireBtnRight = document.querySelector(\".pictire__right\");\r\npictireBtnLeft.addEventListener(\"click\", function () {\r\n  let canvasArr = document.querySelectorAll(\"canvas\");\r\n  pictireBtnRight.style.display = \"block\";\r\n\r\n  if (indexCanvas === 2) {\r\n    pictireBtnLeft.style.display = \"none\";\r\n    indexCanvas = 1;\r\n  } else {\r\n    indexCanvas--;\r\n  }\r\n  cloneCanvasReturn(canvasArr[indexCanvas]);\r\n});\r\npictireBtnRight.addEventListener(\"click\", function () {\r\n  let canvasArr = document.querySelectorAll(\"canvas\");\r\n  pictireBtnLeft.style.display = \"block\";\r\n  if (indexCanvas === canvasArr.length - 1) {\r\n    return;\r\n  } else {\r\n    indexCanvas++;\r\n  }\r\n  cloneCanvasReturn(canvasArr[indexCanvas]);\r\n});\r\n\r\n//Копирование номера телефона в буфер памяти устройства\r\nlet btnPhone = document.querySelector(\".btn__phone\");\r\nbtnPhone.onclick = async function (e) {\r\n  let link = e.target.dataset.link;\r\n  let tmp = document.createElement(\"INPUT\");\r\n  tmp.value = link;\r\n  document.body.appendChild(tmp);\r\n  tmp.select();\r\n  //  try {\r\n  //    const toCopy = \"9246289616\";\r\n  //    await navigator.clipboard.writeText(toCopy);\r\n  //    alert(\"Номер телефона \" + link + \" скопирован\");\r\n  //  } catch (err) {\r\n  //    console.error(\"Failed to copy: \", err);\r\n  //    alert(\"При копировании произошла ошибка. Попробуйте ещё раз\");\r\n  //  }\r\n  document.execCommand(\"copy\");\r\n  //  document.queryCommandSupported(\"copy\");\r\n  document.body.removeChild(tmp);\r\n  alert(\"Номер телефона \" + link + \" скопирован\");\r\n};\r\n\r\nlet dataURL;\r\nwindow.addEventListener(\"load\", imgLocal);\r\nwindow.addEventListener(\"load\", picLocal);\r\n\r\nfunction imgLocal() {\r\n  let numberArr = document.querySelectorAll(\".number__pic-img\");\r\n  let imgData = new Array();\r\n  for (let i = 0; i < numberArr.length; i++) {\r\n    imgData[i] = getBase64Image(numberArr[i]);\r\n    localStorage.setItem(`imgData${i}`, imgData[i]);\r\n  }\r\n}\r\nfunction picLocal() {\r\n  let pictureArr = document.querySelectorAll(\".picture__img\");\r\n  let pictureData = new Array();\r\n  for (let i = 0; i < pictureArr.length; i++) {\r\n    pictureData[i] = getBase64Image(pictureArr[i]);\r\n    localStorage.setItem(`pictureData${i}`, pictureData[i]);\r\n  }\r\n}\r\n\r\nfunction getBase64Image(img) {\r\n  var canvas = document.createElement(\"canvas\");\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n\r\n  var ctx = canvas.getContext(\"2d\");\r\n  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n  dataURL = canvas.toDataURL(\"image/gif\");\r\n  return dataURL.replace(/^data:image\\/(png|jpg|gif);base64,/, \"\");\r\n}\r\n\n\n//# sourceURL=webpack://c/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;